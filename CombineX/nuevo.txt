cabecera 0

=== controlador.py ===
import os
from tkinter import filedialog, messagebox, simpledialog
from gestor_archivos import GestorArchivos
from gestor_dialogos import GestorDialogos

class Controlador:
    def __init__(self, modelo, vista):
        self.modelo = modelo
        self.vista = vista
        self.gestor_archivos = GestorArchivos()
        self.gestor_dialogos = GestorDialogos()

        self.vista.boton_seleccionar_directorio.config(command=self.seleccionar_directorio)
        self.vista.boton_anadir_archivo.config(command=self.anadir_archivo)
        self.vista.boton_agregar_texto.config(command=self.agregar_texto)
        self.vista.boton_combinar.config(command=self.combinar_archivos)
        self.vista.boton_copiar.config(command=self.copiar_portapapeles)
        self.vista.frame_principal.dnd_bind('<<Drop>>', self.archivos_arrastrados)
        
        self.widgets_archivos = {}
        self.mostrando_ruta_completa = {}

    def seleccionar_directorio(self):
        directorio = self.gestor_dialogos.seleccionar_directorio()
        if directorio:
            try:
                tipos_archivo = self.vista.get_tipos_archivo()
                archivos = self.gestor_archivos.obtener_archivos_directorio(directorio, tipos_archivo)
                for archivo in archivos:
                    if os.path.exists(archivo):
                        self.modelo.agregar_archivo(archivo)
                self.actualizar_listbox()
            except Exception as e:
                messagebox.showerror("Error", f"No se pudo acceder al directorio o a los archivos: {str(e)}")

    def anadir_archivo(self):
        archivos = self.gestor_dialogos.seleccionar_archivos(self.vista.get_tipos_archivo())
        if archivos:
            for archivo in archivos:
                self.modelo.agregar_archivo(archivo)
                self.vista.crear_widget_archivo(
                    archivo, 
                    eliminar_func=lambda: self.eliminar_archivo(archivo), 
                    mostrar_ruta_func=lambda: self.mostrar_ruta(archivo),
                    modificar_cabecera_func=lambda: self.modificar_cabecera(archivo)
                )

    def modificar_cabecera(self, archivo):
        texto_cabecera_actual = self.modelo.obtener_texto_cabecera_archivo(archivo)
        print(f"Texto de cabecera actual para {archivo}: {texto_cabecera_actual}")  # Depuración
        nuevo_texto_cabecera = self.gestor_dialogos.obtener_texto_cabecera_inicial(texto_cabecera_actual)
        if nuevo_texto_cabecera is not None:
            self.modelo.establecer_texto_cabecera_archivo(archivo, nuevo_texto_cabecera)
            print(f"Nuevo texto de cabecera para {archivo}: {nuevo_texto_cabecera}")  # Depuración
            self.actualizar_listbox()


    def agregar_texto(self):
        texto_cabecera = self.gestor_dialogos.obtener_texto_cabecera()
        self.modelo.agregar_texto_cabecera(texto_cabecera)
        self.mostrar_texto_cabecera()

    def mostrar_texto_cabecera(self):
        palabras = self.modelo.obtener_texto_cabecera().split()
        texto_mostrado = ' '.join(palabras[:100])
        if len(palabras) > 100:
            texto_mostrado += "..."
        self.vista.mostrar_texto_cabecera(texto_mostrado)

    def eliminar_archivo(self, archivo):
        self.modelo.eliminar_archivo(archivo)
        self.vista.limpiar_listbox()
        self.actualizar_listbox()

    def mostrar_ruta_completa(self, archivo):
        if archivo in self.widgets_archivos:
            frame_archivo = self.widgets_archivos[archivo]
            label_archivo = frame_archivo.nametowidget(frame_archivo.winfo_children()[0])
            if self.mostrando_ruta_completa[archivo]:
                label_archivo.config(text=os.path.basename(archivo))
                self.mostrando_ruta_completa[archivo] = False
            else:
                label_archivo.config(text=archivo)
                self.mostrando_ruta_completa[archivo] = True
                label_archivo.config(wraplength=400)

    def actualizar_listbox(self):
        self.vista.limpiar_listbox()
        for archivo in self.modelo.obtener_archivos():
            frame_archivo = self.vista.crear_widget_archivo(
                archivo, 
                eliminar_func=lambda archivo=archivo: self.eliminar_archivo(archivo),
                mostrar_ruta_func=lambda archivo=archivo: self.mostrar_ruta_completa(archivo),
                modificar_cabecera_func=lambda archivo=archivo: self.modificar_cabecera(archivo)  # Agregar este argumento
            )
            self.widgets_archivos[archivo] = frame_archivo
            self.mostrando_ruta_completa[archivo] = False


    def archivos_arrastrados(self, event):
        archivos = self.vista.ventana.tk.splitlist(event.data)
        for archivo in archivos:
            self.modelo.agregar_archivo(archivo)
        self.actualizar_listbox()

    def combinar_archivos(self):
        nombre_archivo_salida = self.gestor_dialogos.obtener_nombre_archivo_salida()
        if nombre_archivo_salida:
            self.modelo.combinar_archivos(nombre_archivo_salida)
            messagebox.showinfo("Completado", f"Archivos combinados en {nombre_archivo_salida}")

    def copiar_portapapeles(self):
        contenido_combinado = self.modelo.copiar_portapapeles()
        self.vista.ventana.clipboard_clear()
        self.vista.ventana.clipboard_append(contenido_combinado)
        messagebox.showinfo("Copiado", "El contenido combinado ha sido copiado al portapapeles.")


=== gestor_archivos.py ===
import os

class GestorArchivos:
    def obtener_archivos_directorio(self, directorio, tipos_archivo):
        archivos = []
        for tipo in tipos_archivo:
            archivos.extend([os.path.join(directorio, f) for f in os.listdir(directorio) if f.endswith(tipo)])
        return archivos


=== gestor_dialogos.py ===
from tkinter import filedialog, simpledialog, messagebox
import os

class GestorDialogos:
    def seleccionar_directorio(self):
        directorio_inicial = os.getcwd()
        return filedialog.askdirectory(initialdir=directorio_inicial)

    def seleccionar_archivos(self, tipos_archivo):
        tipos_formato = [f"Archivos ({tipo})|{tipo}" for tipo in tipos_archivo]
        tipos_formato_str = " ".join(tipos_formato)
        return filedialog.askopenfilenames(
            title="Seleccionar Archivo(s)",
            filetypes=[(tipos_formato_str, tipos_archivo)]
        )

    def obtener_texto_cabecera(self):
        opcion = messagebox.askyesno("Texto de Cabecera", "¿Deseas escribir el texto manualmente?")
        if opcion:
            return simpledialog.askstring("Texto de Cabecera", "Introduce el texto de cabecera:")
        else:
            archivo_texto = filedialog.askopenfilename(filetypes=[("Archivos de Texto", "*.txt")], initialdir=os.getcwd())
            if archivo_texto:
                with open(archivo_texto, 'r') as archivo:
                    return archivo.read()
        return ""

    def obtener_nombre_archivo_salida(self):
        return simpledialog.askstring("Nombre del archivo", "Introduce el nombre del archivo de salida:")

    def obtener_texto_cabecera_inicial(self, texto_actual=""):
        return simpledialog.askstring("Modificar Texto de Cabecera", "Introduce el nuevo texto de cabecera:", initialvalue=texto_actual)


=== main.py ===
from tkinterdnd2 import TkinterDnD
from modelo import Modelo
from vista import Vista
from controlador import Controlador

if __name__ == "__main__":
    ventana = TkinterDnD.Tk()
    ventana.title("Combinar Archivos Python")
    ventana.tk.call("tk", "scaling", 1.5)

    modelo = Modelo()
    vista = Vista(ventana)
    controlador = Controlador(modelo, vista)

    ventana.mainloop()


=== modelo.py ===
import os

class Modelo:
    def __init__(self):
        self.lista_archivos = []
        self.textos_cabecera = {}

    def agregar_archivo(self, archivo):
        self.lista_archivos.append(archivo)
        self.textos_cabecera[archivo] = ""

    def obtener_texto_cabecera_archivo(self, archivo):
        return self.textos_cabecera.get(archivo, "")

    def establecer_texto_cabecera_archivo(self, archivo, texto):
        self.textos_cabecera[archivo] = texto

    def eliminar_archivo(self, archivo):
        if archivo in self.lista_archivos:
            self.lista_archivos.remove(archivo)

    def obtener_archivos(self):
        return self.lista_archivos

    def agregar_texto_cabecera(self, texto):
        self.texto_cabecera = texto

    def obtener_texto_cabecera(self):
        return self.texto_cabecera or ""

    def combinar_archivos(self, nombre_archivo_salida):
        with open(nombre_archivo_salida, 'w') as archivo_salida:
            if self.texto_cabecera:
                archivo_salida.write(self.texto_cabecera + '\n\n')
                print(f"Escribiendo cabecera general: {self.texto_cabecera}")  # Depuración

            for archivo in self.lista_archivos:
                archivo_salida.write(f'=== {os.path.basename(archivo)} ===\n')
                cabecera_individual = self.textos_cabecera.get(archivo, "")
                if cabecera_individual:
                    archivo_salida.write(cabecera_individual + '\n')
                    print(f"Escribiendo cabecera individual para {archivo}: {cabecera_individual}")  # Depuración

                with open(archivo, 'r') as archivo_file:
                    contenido = archivo_file.read()
                    archivo_salida.write(contenido)
                    archivo_salida.write('\n\n')
                    print(f"Escribiendo contenido del archivo {archivo}")  # Depuración


    
    
    def copiar_portapapeles(self):
        contenido_combinado = self.texto_cabecera + '\n\n' if self.texto_cabecera else ""
        for archivo in self.lista_archivos:
            contenido_combinado += f'=== {os.path.basename(archivo)} ===\n'
            with open(archivo, 'r') as archivo_file:
                contenido_combinado += archivo_file.read() + '\n\n'
        return contenido_combinado


=== vista.py ===
cabecera 1
import tkinter as tk
from tkinter import filedialog, simpledialog, messagebox
import os
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
from tkinterdnd2 import DND_FILES, TkinterDnD

class Vista:
    def __init__(self, ventana):
        self.ventana = ventana
        self.ventana.title("Combinar Archivos")
        self.ventana.minsize(600, 400)

        self.frame_principal = tk.Frame(ventana, bg="lightgray")
        self.frame_principal.pack(fill=tk.BOTH, expand=True, pady=10, padx=10)

        self.canvas = tk.Canvas(self.frame_principal, bg="lightgray")
        self.scrollbar = tk.Scrollbar(self.frame_principal, orient="vertical", command=self.canvas.yview)
        self.frame_canvas = tk.Frame(self.canvas, bg="lightgray")

        self.canvas.create_window((0, 0), window=self.frame_canvas, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)
        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.frame_canvas.bind("<Configure>", lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all")))

        self.label_texto_cabecera = tk.Label(self.frame_principal, text="", anchor="w", justify="left", bg="lightgray", wraplength=580, font=("Helvetica Neue", 12, "italic"))
        self.label_texto_cabecera.pack(fill=tk.X, padx=10, pady=5)

        self.frame_botones = tk.Frame(self.frame_principal, bg="lightgray")
        self.frame_botones.pack(side=tk.BOTTOM, fill=tk.X, pady=10)

        self.boton_seleccionar_directorio = ttk.Button(self.frame_botones, text="Seleccionar Directorio", bootstyle="success", padding=(10,5))
        self.boton_seleccionar_directorio.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

        self.boton_anadir_archivo = ttk.Button(self.frame_botones, text="Añadir Archivo", bootstyle="success", padding=(10,5))
        self.boton_anadir_archivo.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

        self.boton_agregar_texto = ttk.Button(self.frame_botones, text="Agregar Texto de Cabecera", bootstyle="info", padding=(10,5))
        self.boton_agregar_texto.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

        self.boton_combinar = ttk.Button(self.frame_botones, text="Combinar Archivos", bootstyle="success", padding=(10,5))
        self.boton_combinar.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

        self.boton_copiar = ttk.Button(self.frame_botones, text="Copiar al Portapapeles", bootstyle="warning", padding=(10,5))
        self.boton_copiar.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

        self.frame_principal.drop_target_register(DND_FILES)

        # Checkboxes para tipos de archivo
        self.checkbox_py_var = tk.BooleanVar(value=True)
        self.checkbox_py = ttk.Checkbutton(self.frame_botones, text="*.py", variable=self.checkbox_py_var, bootstyle="primary")
        self.checkbox_py.pack(side=tk.LEFT, padx=5)

        self.checkbox_txt_var = tk.BooleanVar(value=False)
        self.checkbox_txt = ttk.Checkbutton(self.frame_botones, text="*.txt", variable=self.checkbox_txt_var, bootstyle="primary")
        self.checkbox_txt.pack(side=tk.LEFT, padx=5)

        self.checkbox_md_var = tk.BooleanVar(value=False)
        self.checkbox_md = ttk.Checkbutton(self.frame_botones, text="*.md", variable=self.checkbox_md_var, bootstyle="primary")
        self.checkbox_md.pack(side=tk.LEFT, padx=5)

        self.checkbox_m_var = tk.BooleanVar(value=False)
        self.checkbox_m = ttk.Checkbutton(self.frame_botones, text="*.m", variable=self.checkbox_m_var, bootstyle="primary")
        self.checkbox_m.pack(side=tk.LEFT, padx=5)

    def get_tipos_archivo(self):
        tipos_archivo = []
        if self.checkbox_py_var.get():
            tipos_archivo.append("*.py")
        if self.checkbox_txt_var.get():
            tipos_archivo.append("*.txt")
        if self.checkbox_md_var.get():
            tipos_archivo.append("*.md")
        if self.checkbox_m_var.get():
            tipos_archivo.append("*.m")
        return tipos_archivo
        
    def mostrar_texto_cabecera(self, texto_mostrado):
        self.label_texto_cabecera.config(text=texto_mostrado)

    def crear_widget_archivo(self, archivo, eliminar_func, mostrar_ruta_func):
        frame_archivo = tk.Frame(self.frame_canvas, bg="lightgray", padx=10, pady=5)
        frame_archivo.pack(fill=tk.X, pady=2)

        label_archivo = tk.Label(frame_archivo, text=os.path.basename(archivo), anchor="w", font=("Helvetica Neue", 10, "bold"), bg="lightgray")
        label_archivo.pack(side=tk.LEFT, fill=tk.X, expand=True)
        label_archivo.bind("<Button-1>", lambda e: mostrar_ruta_func())

        boton_eliminar = ttk.Button(frame_archivo, text="Eliminar", command=eliminar_func, bootstyle="danger", padding=(5,2))
        boton_eliminar.pack(side=tk.RIGHT)

        return frame_archivo

    def limpiar_listbox(self):
        for widget in self.frame_canvas.winfo_children():
            widget.destroy()

    def crear_widget_archivo(self, archivo, eliminar_func, mostrar_ruta_func, modificar_cabecera_func):
        frame_archivo = tk.Frame(self.frame_canvas, bg="lightgray", padx=10, pady=5)
        frame_archivo.pack(fill=tk.X, pady=2)

        label_archivo = tk.Label(frame_archivo, text=os.path.basename(archivo), anchor="w", font=("Helvetica Neue", 10, "bold"), bg="lightgray")
        label_archivo.pack(side=tk.LEFT, fill=tk.X, expand=True)
        label_archivo.bind("<Button-1>", lambda e: mostrar_ruta_func())

        boton_modificar_cabecera = ttk.Button(frame_archivo, text="Modificar Cabecera", command=modificar_cabecera_func, bootstyle="info", padding=(5,2))
        boton_modificar_cabecera.pack(side=tk.RIGHT)

        boton_eliminar = ttk.Button(frame_archivo, text="Eliminar", command=eliminar_func, bootstyle="danger", padding=(5,2))
        boton_eliminar.pack(side=tk.RIGHT)

        return frame_archivo


